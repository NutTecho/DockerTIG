version: '3.7'
services: 
  # influxdb:
  #   container_name: influxdb
  #   image: "influxdb:1.8"
  #   ports: 
  #     - 8086:8086
  #   networks: 
  #     tignetwork:
  #       ipv4_address: 172.22.0.3
  #   environment: 
  #     INFLUXDB_HTTP_AUTH_ENABLE : "true"
  #     INFLUXDB_DB : "iot"
  #     INFLUXDB_ADMIN_USER : "admin"
  #     INFLUXDB_ADMIN_PASSWORD : "influx"
  #   volumes: 
  #     - ./influxdb:/var/lib/influxdb:rw
  #   restart: always

  influxdb2:
    image: influxdb:2.6-alpine
    container_name: influxdb2
    ports:
      - "8086:8086"
    volumes:
      - type: bind
        source: ./influxdb2/data
        target: /var/lib/influxdb2
      - type: bind
        source: ./influxdb2/config
        target: /etc/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=influxdb123
      - DOCKER_INFLUXDB_INIT_ORG=KMITL
      - DOCKER_INFLUXDB_INIT_BUCKET=mybucket
      - DOCKER_INFLUXDB_INIT_RETENTION=1w
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=Oh0wYUWAeapaxMvLSQJvxzsJxYYgQHvEZOcrmpq4S_MSp1ZFPa1XDmj1_ZqBQP4ez22ceGGoeF-7J1wzjw1_tw==
    restart: always
    networks: 
      tignetwork:
        ipv4_address: 172.22.0.3


  grafana:
    container_name: grafana
    image: "grafana/grafana"
    ports:
      - 3000:3000
    networks: 
      tignetwork:
        ipv4_address: 172.22.0.2
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_RENDERING_CALLBACK_URL: http://172.22.0.2:3000/
      GF_RENDERING_SERVER_URL: http://172.22.0.7:8081/render
      GF_LOG_FILTERS: rendering:debug
    volumes:
      - ./grafana:/var/lib/grafana:rw
      - ./grafana/config.ini:/usr/share/grafana/conf/defaults.ini:rw
   
    restart: always

  renderer:
    container_name: renderer
    image: grafana/grafana-image-renderer:latest
    restart: always
    ports:
      - 8081:8081
    volumes:
      - ./grafana_render/config.json:/usr/src/app/config.json
    networks: 
      tignetwork:
        ipv4_address: 172.22.0.7

  telegraf:
    container_name: telegraf
    image: "telegraf"
    ports:
      - "8092:8092"
      - "8094:8094"
      - "8125:8125"
    depends_on:
     - "influxdb2"
     - "emqx"
    networks: 
      tignetwork:
        ipv4_address: 172.22.0.4
    volumes:
      - ./telegraf2/telegraf.conf:/etc/telegraf/telegraf.conf:rw
    restart: always

  # mosquitto:
  #   container_name: mosquitto
  #   image: eclipse-mosquitto
  #   restart: always
  #   volumes:
  #     - ./mqtt/conf:/mosquitto/config
  #     - ./mqtt/data:/mosquitto/data
  #     - ./mqtt/log:/mosquitto/log
  #   expose:
  #     - 1883
  #     - 9001
  #   ports:
  #     - 1883:1883
  #     - 9001:9001
  #   networks:
  #     tignetwork:
  #       ipv4_address: 172.22.0.5

# user admin password admin1234 , default public
  emqx:
    image: emqx/emqx
    container_name: emqx
    restart: always
    environment:
    - "EMQX_NODE_NAME=emqx@node1.emqx.com"
    - "EMQX_CLUSTER__DISCOVERY_STRATEGY=static"
    healthcheck:
      test: ["CMD", "/opt/emqx/bin/emqx_ctl", "status"]
      interval: 5s
      timeout: 25s
      retries: 5
    networks:
      tignetwork:
        ipv4_address: 172.22.0.5
    ports:
      - 1883:1883
      - 8083:8083
      - 8084:8084
      - 8883:8883
      - 18083:18083 
    volumes:
      - ./emqx/data:/opt/emqx/data
      - ./emqx/config:/etc/emqx/etc

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./portainer:/data
    ports:
      - 9000:9000
    networks:
      tignetwork:
        ipv4_address: 172.22.0.6

  
networks: 
  tignetwork:
    name: tignetwork
    driver : bridge
    ipam:
        config:
          - subnet: 172.22.0.0/16
            # gateway: 172.20.0.1
            #docker-compose v3+ do not use ip_range
            # ip_range: 172.28.5.0/24

# volumes:
#  influxdb-data:
#  grafana-data:
#  telegraf-data:

# postgres:
  #   container_name: postgres
  #   image: postgres
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: admin
  #   volumes:
  #     - ./postgres:/var/lib/postgresql/data
  #   ports:
  #     - 5432:5432
  #   networks:
  #     postgres:
  #       ipv4_address: 172.21.0.2

  # timescaledb:
  #   container_name: timescaledb
  #   image: timescale/timescaledb-ha:pg14-latest
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: admin
  #   volumes:
  #     - ./timescale:/home/postgres/
  #   # /var/lib/postgresql/data/postgresql.conf
  #   ports:
  #     - 5432:5432
  #   networks:
  #     tignetwork:
  #       ipv4_address: 172.22.0.14
 
  # pgadmin:
  #   container_name: pgadmin
  #   image: dpage/pgadmin4
  #   restart: unless-stopped
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: user@domain.com
  #     PGADMIN_DEFAULT_PASSWORD: admin
  #   ports:
  #   - 5050:80
  #   volumes:
  #   - ./pgadmin:/var/lib/pgadmin
  #   networks:
  #     tignetwork:
  #       ipv4_address: 172.22.0.13

  # prometheus:
  #     image: prom/prometheus:latest
  #     volumes:
  #       - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #     command:
  #      - '--config.file=/etc/prometheus/prometheus.yml'
  #     ports:
  #       - '9090:9090'
  #     restart: always

  # environment: 
  #   - HOST_PROC=./telegraf2/host/proc
  #   - HOST_SYS=./telegraf2/host/sys
  #   - HOST_ETC=./telegraf2/host/etc
    # HOST_NAME : "telegraf"
    # INFLUXDB_HOST : "influxdb"
    # INFLUXDB_PORT : "8086"
    # DATABASE : "iot"
  # privileged: true
  # tty : true


# docker run --rm telegraf:latest telegraf config > ./telegraf2/telegraf.conf:rw

# === custom legend name =====
# ${__series.name}.${__field.name}

# https://app.slack.com/block-kit-builder/
# curl -X POST -H 'Content-type: application/json' --data '{
# }' https://hooks.slack.com/services/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


